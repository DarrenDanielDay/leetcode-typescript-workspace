/*
 * @lc app=leetcode.cn id=662 lang=typescript
 *
 * [662] 二叉树最大宽度
 */

// @lc code=start
/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     val: number
 *     left: TreeNode | null
 *     right: TreeNode | null
 *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.left = (left===undefined ? null : left)
 *         this.right = (right===undefined ? null : right)
 *     }
 * }
 */

function widthOfBinaryTree(root: TreeNode | null): number {
  if (!root) {
    return 0;
  }
  let maxLevel = -Infinity;
  // 卡精度
  // lc, nmsl
  const levelBounds = Array.from({ length: 3005 }, (): [bigint, bigint] => [2n ** 3010n, -1n]);
  (function dfs(node: TreeNode, level: number, id: bigint) {
    const bounds = levelBounds[level]!;
    const [leftMost, rightMost] = bounds;
    bounds[0] = leftMost < id ? leftMost : id;
    bounds[1] = rightMost > id ? rightMost : id;
    maxLevel = Math.max(maxLevel, level);
    const { left, right } = node;
    if (left) {
      dfs(left, level + 1, id * 2n + 1n);
    }
    if (right) {
      dfs(right, level + 1, id * 2n + 2n);
    }
  })(root, 0, 0n);
  const max = levelBounds.slice(0, maxLevel + 1).reduce((max, [left, right]) => {
    const length = right - left + 1n;
    return max > length ? max : length;
  }, -1n);
  return +max.toString();
}
// @lc code=end
test
  .Func(widthOfBinaryTree)
  .withCases(
    [[test.tree.create([1, 3, 2, 5, 3, null, 9])], 4],
    [[test.tree.create([1, 3, 2, 5, null, null, 9, 6, null, 7])], 7],
    [[test.tree.create([1, 3, 2, 5])], 2],
    [
      [
        test.tree.create([
          0,
          0,
          0,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
          null,
          0,
          0,
          null,
        ]),
      ],
      2,
    ]
  );
